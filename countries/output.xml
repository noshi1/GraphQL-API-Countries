<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.2 (Python 3.7.9 on win32)" generated="20211213 12:21:14.086" rpa="false" schemaversion="2">
<suite id="s1" name="Countries" source="C:\Users\nghani\eclipse-workspace\countries">
<suite id="s1-s1" name="Tests" source="C:\Users\nghani\eclipse-workspace\countries\Tests">
<suite id="s1-s1-s1" name="Countries API" source="C:\Users\nghani\eclipse-workspace\countries\Tests\Countries_API.robot">
<kw name="SuiteSetup API" type="SETUP">
<kw name="SuiteSetup" library="Common_API_Keywords">
<doc>common initialization for UI and API test suites</doc>
<kw name="Log" library="BuiltIn">
<arg>Open DB connection</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211213 12:21:14.629" level="INFO">Open DB connection</msg>
<status status="PASS" starttime="20211213 12:21:14.628" endtime="20211213 12:21:14.629"/>
</kw>
<status status="PASS" starttime="20211213 12:21:14.628" endtime="20211213 12:21:14.629"/>
</kw>
<status status="PASS" starttime="20211213 12:21:14.628" endtime="20211213 12:21:14.630"/>
</kw>
<test id="s1-s1-s1-t1" name="Validate The Countries API - success reponse">
<kw name="TestCaseSetup" library="Common_API_Keywords" type="SETUP">
<doc>common initialization for UI and API test cases</doc>
<kw name="Get Time" library="BuiltIn">
<var>${TESTCASE_EPOCH_STARTTIME}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20211213 12:21:14.631" level="INFO">${TESTCASE_EPOCH_STARTTIME} = 1639416074</msg>
<status status="PASS" starttime="20211213 12:21:14.631" endtime="20211213 12:21:14.631"/>
</kw>
<status status="PASS" starttime="20211213 12:21:14.630" endtime="20211213 12:21:14.632"/>
</kw>
<kw name="Verify The Countries API - success reponse" library="CountriesKeywords">
<kw name="Log" library="BuiltIn">
<arg>Send the post request with the valid query</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211213 12:21:14.632" level="INFO">Send the post request with the valid query</msg>
<status status="PASS" starttime="20211213 12:21:14.632" endtime="20211213 12:21:14.633"/>
</kw>
<kw name="Post Response" library="Common_API_Keywords">
<var>${resp}</var>
<arg>${COUNTRIES_API_URL}</arg>
<doc>Returns the response of the post Request</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20211213 12:21:14.634" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20211213 12:21:14.633" endtime="20211213 12:21:14.634"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${body}</var>
<arg>query= query {countries {name}country(code:"US") {name, native, capital, emoji, currency, languages {code, name}states{name, code}}}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20211213 12:21:14.634" level="INFO">${body} = {'query': ' query {countries {name}country(code:"US") {name, native, capital, emoji, currency, languages {code, name}states{name, code}}}'}</msg>
<status status="PASS" starttime="20211213 12:21:14.634" endtime="20211213 12:21:14.634"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>mysession</arg>
<arg>${url}</arg>
<arg>${headers}</arg>
<arg>timeout=100</arg>
<arg>verify=true</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20211213 12:21:14.635" level="INFO">Creating Session using : alias=mysession, url=https://countries.trevorblades.com/, headers={'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=100, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20211213 12:21:14.635" endtime="20211213 12:21:14.635"/>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<var>${resp}</var>
<arg>mysession</arg>
<arg>${url}</arg>
<arg>json=${body}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20211213 12:21:14.732" level="INFO">POST Request : url=https://countries.trevorblades.com/ 
 path_url=/ 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '141'} 
 body=b'{"query": " query {countries {name}country(code:\\"US\\") {name, native, capital, emoji, currency, languages {code, name}states{name, code}}}"}' 
 </msg>
<msg timestamp="20211213 12:21:14.733" level="INFO">POST Response : url=https://countries.trevorblades.com/ 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', 'content-encoding': 'gzip', 'etag': 'W/"1d9a-VTOjSoUjQA+edOT/FcKY9dRJYek"', 'date': 'Mon, 13 Dec 2021 17:21:14 GMT', 'connection': 'keep-alive', 'keep-alive': 'timeout=5', 'transfer-encoding': 'chunked', 'server': 'Fly/fb1a8b2 (2021-11-25)', 'via': '1.1 fly.io', 'fly-request-id': '01FPTD04EH0MCQ3SAY8PKYT2YF'} 
 body={"data":{"countries":[{"name":"Andorra"},{"name":"United Arab Emirates"},{"name":"Afghanistan"},{"name":"Antigua and Barbuda"},{"name":"Anguilla"},{"name":"Albania"},{"name":"Armenia"},{"name":"Angola"},{"name":"Antarctica"},{"name":"Argentina"},{"name":"American Samoa"},{"name":"Austria"},{"name":"Australia"},{"name":"Aruba"},{"name":"Åland"},{"name":"Azerbaijan"},{"name":"Bosnia and Herzegovina"},{"name":"Barbados"},{"name":"Bangladesh"},{"name":"Belgium"},{"name":"Burkina Faso"},{"name":"Bulgaria"},{"name":"Bahrain"},{"name":"Burundi"},{"name":"Benin"},{"name":"Saint Barthélemy"},{"name":"Bermuda"},{"name":"Brunei"},{"name":"Bolivia"},{"name":"Bonaire"},{"name":"Brazil"},{"name":"Bahamas"},{"name":"Bhutan"},{"name":"Bouvet Island"},{"name":"Botswana"},{"name":"Belarus"},{"name":"Belize"},{"name":"Canada"},{"name":"Cocos [Keeling] Islands"},{"name":"Democratic Republic of the Congo"},{"name":"Central African Republic"},{"name":"Republic of the Congo"},{"name":"Switzerland"},{"name":"Ivory Coast"},{"name":"Cook Islands"},{"name":"Chile"},{"name":"Cameroon"},{"name":"China"},{"name":"Colombia"},{"name":"Costa Rica"},{"name":"Cuba"},{"name":"Cape Verde"},{"name":"Curacao"},{"name":"Christmas Island"},{"name":"Cyprus"},{"name":"Czech Republic"},{"name":"Germany"},{"name":"Djibouti"},{"name":"Denmark"},{"name":"Dominica"},{"name":"Dominican Republic"},{"name":"Algeria"},{"name":"Ecuador"},{"name":"Estonia"},{"name":"Egypt"},{"name":"Western Sahara"},{"name":"Eritrea"},{"name":"Spain"},{"name":"Ethiopia"},{"name":"Finland"},{"name":"Fiji"},{"name":"Falkland Islands"},{"name":"Micronesia"},{"name":"Faroe Islands"},{"name":"France"},{"name":"Gabon"},{"name":"United Kingdom"},{"name":"Grenada"},{"name":"Georgia"},{"name":"French Guiana"},{"name":"Guernsey"},{"name":"Ghana"},{"name":"Gibraltar"},{"name":"Greenland"},{"name":"Gambia"},{"name":"Guinea"},{"name":"Guadeloupe"},{"name":"Equatorial Guinea"},{"name":"Greece"},{"name":"South Georgia and the South Sandwich Islands"},{"name":"Guatemala"},{"name":"Guam"},{"name":"Guinea-Bissau"},{"name":"Guyana"},{"name":"Hong Kong"},{"name":"Heard Island and McDonald Islands"},{"name":"Honduras"},{"name":"Croatia"},{"name":"Haiti"},{"name":"Hungary"},{"name":"Indonesia"},{"name":"Ireland"},{"name":"Israel"},{"name":"Isle of Man"},{"name":"India"},{"name":"British Indian Ocean Territory"},{"name":"Iraq"},{"name":"Iran"},{"name":"Iceland"},{"name":"Italy"},{"name":"Jersey"},{"name":"Jamaica"},{"name":"Jordan"},{"name":"Japan"},{"name":"Kenya"},{"name":"Kyrgyzstan"},{"name":"Cambodia"},{"name":"Kiribati"},{"name":"Comoros"},{"name":"Saint Kitts and Nevis"},{"name":"North Korea"},{"name":"South Korea"},{"name":"Kuwait"},{"name":"Cayman Islands"},{"name":"Kazakhstan"},{"name":"Laos"},{"name":"Lebanon"},{"name":"Saint Lucia"},{"name":"Liechtenstein"},{"name":"Sri Lanka"},{"name":"Liberia"},{"name":"Lesotho"},{"name":"Lithuania"},{"name":"Luxembourg"},{"name":"Latvia"},{"name":"Libya"},{"name":"Morocco"},{"name":"Monaco"},{"name":"Moldova"},{"name":"Montenegro"},{"name":"Saint Martin"},{"name":"Madagascar"},{"name":"Marshall Islands"},{"name":"North Macedonia"},{"name":"Mali"},{"name":"Myanmar [Burma]"},{"name":"Mongolia"},{"name":"Macao"},{"name":"Northern Mariana Islands"},{"name":"Martinique"},{"name":"Mauritania"},{"name":"Montserrat"},{"name":"Malta"},{"name":"Mauritius"},{"name":"Maldives"},{"name":"Malawi"},{"name":"Mexico"},{"name":"Malaysia"},{"name":"Mozambique"},{"name":"Namibia"},{"name":"New Caledonia"},{"name":"Niger"},{"name":"Norfolk Island"},{"name":"Nigeria"},{"name":"Nicaragua"},{"name":"Netherlands"},{"name":"Norway"},{"name":"Nepal"},{"name":"Nauru"},{"name":"Niue"},{"name":"New Zealand"},{"name":"Oman"},{"name":"Panama"},{"name":"Peru"},{"name":"French Polynesia"},{"name":"Papua New Guinea"},{"name":"Philippines"},{"name":"Pakistan"},{"name":"Poland"},{"name":"Saint Pierre and Miquelon"},{"name":"Pitcairn Islands"},{"name":"Puerto Rico"},{"name":"Palestine"},{"name":"Portugal"},{"name":"Palau"},{"name":"Paraguay"},{"name":"Qatar"},{"name":"Réunion"},{"name":"Romania"},{"name":"Serbia"},{"name":"Russia"},{"name":"Rwanda"},{"name":"Saudi Arabia"},{"name":"Solomon Islands"},{"name":"Seychelles"},{"name":"Sudan"},{"name":"Sweden"},{"name":"Singapore"},{"name":"Saint Helena"},{"name":"Slovenia"},{"name":"Svalbard and Jan Mayen"},{"name":"Slovakia"},{"name":"Sierra Leone"},{"name":"San Marino"},{"name":"Senegal"},{"name":"Somalia"},{"name":"Suriname"},{"name":"South Sudan"},{"name":"São Tomé and Príncipe"},{"name":"El Salvador"},{"name":"Sint Maarten"},{"name":"Syria"},{"name":"Swaziland"},{"name":"Turks and Caicos Islands"},{"name":"Chad"},{"name":"French Southern Territories"},{"name":"Togo"},{"name":"Thailand"},{"name":"Tajikistan"},{"name":"Tokelau"},{"name":"East Timor"},{"name":"Turkmenistan"},{"name":"Tunisia"},{"name":"Tonga"},{"name":"Turkey"},{"name":"Trinidad and Tobago"},{"name":"Tuvalu"},{"name":"Taiwan"},{"name":"Tanzania"},{"name":"Ukraine"},{"name":"Uganda"},{"name":"U.S. Minor Outlying Islands"},{"name":"United States"},{"name":"Uruguay"},{"name":"Uzbekistan"},{"name":"Vatican City"},{"name":"Saint Vincent and the Grenadines"},{"name":"Venezuela"},{"name":"British Virgin Islands"},{"name":"U.S. Virgin Islands"},{"name":"Vietnam"},{"name":"Vanuatu"},{"name":"Wallis and Futuna"},{"name":"Samoa"},{"name":"Kosovo"},{"name":"Yemen"},{"name":"Mayotte"},{"name":"South Africa"},{"name":"Zambia"},{"name":"Zimbabwe"}],"country":{"name":"United States","native":"United States","capital":"Washington D.C.","emoji":"🇺🇸","currency":"USD,USN,USS","languages":[{"code":"en","name":"English"}],"states":[{"name":"Alabama","code":"AL"},{"name":"Alaska","code":"AK"},{"name":"Arizona","code":"AZ"},{"name":"Arkansas","code":"AR"},{"name":"California","code":"CA"},{"name":"Colorado","code":"CO"},{"name":"Connecticut","code":"CT"},{"name":"District of Columbia","code":"DC"},{"name":"Delaware","code":"DE"},{"name":"Florida","code":"FL"},{"name":"Georgia","code":"GA"},{"name":"Hawaii","code":"HI"},{"name":"Idaho","code":"ID"},{"name":"Illinois","code":"IL"},{"name":"Indiana","code":"IN"},{"name":"Iowa","code":"IA"},{"name":"Kansas","code":"KS"},{"name":"Kentucky","code":"KY"},{"name":"Louisiana","code":"LA"},{"name":"Maine","code":"ME"},{"name":"Maryland","code":"MD"},{"name":"Massachusetts","code":"MA"},{"name":"Michigan","code":"MI"},{"name":"Minnesota","code":"MN"},{"name":"Mississippi","code":"MS"},{"name":"Missouri","code":"MO"},{"name":"Montana","code":"MT"},{"name":"Nebraska","code":"NE"},{"name":"Nevada","code":"NV"},{"name":"New Hampshire","code":"NH"},{"name":"New Jersey","code":"NJ"},{"name":"New Mexico","code":"NM"},{"name":"New York","code":"NY"},{"name":"North Carolina","code":"NC"},{"name":"North Dakota","code":"ND"},{"name":"Ohio","code":"OH"},{"name":"Oklahoma","code":"OK"},{"name":"Oregon","code":"OR"},{"name":"Pennsylvania","code":"PA"},{"name":"Rhode Island","code":"RI"},{"name":"South Carolina","code":"SC"},{"name":"South Dakota","code":"SD"},{"name":"Tennessee","code":"TN"},{"name":"Texas","code":"TX"},{"name":"Utah","code":"UT"},{"name":"Vermont","code":"VT"},{"name":"Virginia","code":"VA"},{"name":"Washington","code":"WA"},{"name":"West Virginia","code":"WV"},{"name":"Wisconsin","code":"WI"},{"name":"Wyoming","code":"WY"},{"name":"American Samoa","code":"AS"},{"name":"Guam","code":"GU"},{"name":"Northern Mariana Islands","code":"MP"},{"name":"Puerto Rico","code":"PR"},{"name":"United States Minor Outlying Islands","code":"UM"},{"name":"Virgin Islands","code":"VI"}]}}}
 
 </msg>
<msg timestamp="20211213 12:21:14.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20211213 12:21:14.636" endtime="20211213 12:21:14.736"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>RESPONSE: ${resp}</arg>
<arg>console=true</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211213 12:21:14.739" level="INFO">RESPONSE: &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20211213 12:21:14.737" endtime="20211213 12:21:14.739"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>JSON:${resp.json()}</arg>
<arg>console=true</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211213 12:21:14.744" level="INFO">JSON:{'data': {'countries': [{'name': 'Andorra'}, {'name': 'United Arab Emirates'}, {'name': 'Afghanistan'}, {'name': 'Antigua and Barbuda'}, {'name': 'Anguilla'}, {'name': 'Albania'}, {'name': 'Armenia'}, {'name': 'Angola'}, {'name': 'Antarctica'}, {'name': 'Argentina'}, {'name': 'American Samoa'}, {'name': 'Austria'}, {'name': 'Australia'}, {'name': 'Aruba'}, {'name': 'Åland'}, {'name': 'Azerbaijan'}, {'name': 'Bosnia and Herzegovina'}, {'name': 'Barbados'}, {'name': 'Bangladesh'}, {'name': 'Belgium'}, {'name': 'Burkina Faso'}, {'name': 'Bulgaria'}, {'name': 'Bahrain'}, {'name': 'Burundi'}, {'name': 'Benin'}, {'name': 'Saint Barthélemy'}, {'name': 'Bermuda'}, {'name': 'Brunei'}, {'name': 'Bolivia'}, {'name': 'Bonaire'}, {'name': 'Brazil'}, {'name': 'Bahamas'}, {'name': 'Bhutan'}, {'name': 'Bouvet Island'}, {'name': 'Botswana'}, {'name': 'Belarus'}, {'name': 'Belize'}, {'name': 'Canada'}, {'name': 'Cocos [Keeling] Islands'}, {'name': 'Democratic Republic of the Congo'}, {'name': 'Central African Republic'}, {'name': 'Republic of the Congo'}, {'name': 'Switzerland'}, {'name': 'Ivory Coast'}, {'name': 'Cook Islands'}, {'name': 'Chile'}, {'name': 'Cameroon'}, {'name': 'China'}, {'name': 'Colombia'}, {'name': 'Costa Rica'}, {'name': 'Cuba'}, {'name': 'Cape Verde'}, {'name': 'Curacao'}, {'name': 'Christmas Island'}, {'name': 'Cyprus'}, {'name': 'Czech Republic'}, {'name': 'Germany'}, {'name': 'Djibouti'}, {'name': 'Denmark'}, {'name': 'Dominica'}, {'name': 'Dominican Republic'}, {'name': 'Algeria'}, {'name': 'Ecuador'}, {'name': 'Estonia'}, {'name': 'Egypt'}, {'name': 'Western Sahara'}, {'name': 'Eritrea'}, {'name': 'Spain'}, {'name': 'Ethiopia'}, {'name': 'Finland'}, {'name': 'Fiji'}, {'name': 'Falkland Islands'}, {'name': 'Micronesia'}, {'name': 'Faroe Islands'}, {'name': 'France'}, {'name': 'Gabon'}, {'name': 'United Kingdom'}, {'name': 'Grenada'}, {'name': 'Georgia'}, {'name': 'French Guiana'}, {'name': 'Guernsey'}, {'name': 'Ghana'}, {'name': 'Gibraltar'}, {'name': 'Greenland'}, {'name': 'Gambia'}, {'name': 'Guinea'}, {'name': 'Guadeloupe'}, {'name': 'Equatorial Guinea'}, {'name': 'Greece'}, {'name': 'South Georgia and the South Sandwich Islands'}, {'name': 'Guatemala'}, {'name': 'Guam'}, {'name': 'Guinea-Bissau'}, {'name': 'Guyana'}, {'name': 'Hong Kong'}, {'name': 'Heard Island and McDonald Islands'}, {'name': 'Honduras'}, {'name': 'Croatia'}, {'name': 'Haiti'}, {'name': 'Hungary'}, {'name': 'Indonesia'}, {'name': 'Ireland'}, {'name': 'Israel'}, {'name': 'Isle of Man'}, {'name': 'India'}, {'name': 'British Indian Ocean Territory'}, {'name': 'Iraq'}, {'name': 'Iran'}, {'name': 'Iceland'}, {'name': 'Italy'}, {'name': 'Jersey'}, {'name': 'Jamaica'}, {'name': 'Jordan'}, {'name': 'Japan'}, {'name': 'Kenya'}, {'name': 'Kyrgyzstan'}, {'name': 'Cambodia'}, {'name': 'Kiribati'}, {'name': 'Comoros'}, {'name': 'Saint Kitts and Nevis'}, {'name': 'North Korea'}, {'name': 'South Korea'}, {'name': 'Kuwait'}, {'name': 'Cayman Islands'}, {'name': 'Kazakhstan'}, {'name': 'Laos'}, {'name': 'Lebanon'}, {'name': 'Saint Lucia'}, {'name': 'Liechtenstein'}, {'name': 'Sri Lanka'}, {'name': 'Liberia'}, {'name': 'Lesotho'}, {'name': 'Lithuania'}, {'name': 'Luxembourg'}, {'name': 'Latvia'}, {'name': 'Libya'}, {'name': 'Morocco'}, {'name': 'Monaco'}, {'name': 'Moldova'}, {'name': 'Montenegro'}, {'name': 'Saint Martin'}, {'name': 'Madagascar'}, {'name': 'Marshall Islands'}, {'name': 'North Macedonia'}, {'name': 'Mali'}, {'name': 'Myanmar [Burma]'}, {'name': 'Mongolia'}, {'name': 'Macao'}, {'name': 'Northern Mariana Islands'}, {'name': 'Martinique'}, {'name': 'Mauritania'}, {'name': 'Montserrat'}, {'name': 'Malta'}, {'name': 'Mauritius'}, {'name': 'Maldives'}, {'name': 'Malawi'}, {'name': 'Mexico'}, {'name': 'Malaysia'}, {'name': 'Mozambique'}, {'name': 'Namibia'}, {'name': 'New Caledonia'}, {'name': 'Niger'}, {'name': 'Norfolk Island'}, {'name': 'Nigeria'}, {'name': 'Nicaragua'}, {'name': 'Netherlands'}, {'name': 'Norway'}, {'name': 'Nepal'}, {'name': 'Nauru'}, {'name': 'Niue'}, {'name': 'New Zealand'}, {'name': 'Oman'}, {'name': 'Panama'}, {'name': 'Peru'}, {'name': 'French Polynesia'}, {'name': 'Papua New Guinea'}, {'name': 'Philippines'}, {'name': 'Pakistan'}, {'name': 'Poland'}, {'name': 'Saint Pierre and Miquelon'}, {'name': 'Pitcairn Islands'}, {'name': 'Puerto Rico'}, {'name': 'Palestine'}, {'name': 'Portugal'}, {'name': 'Palau'}, {'name': 'Paraguay'}, {'name': 'Qatar'}, {'name': 'Réunion'}, {'name': 'Romania'}, {'name': 'Serbia'}, {'name': 'Russia'}, {'name': 'Rwanda'}, {'name': 'Saudi Arabia'}, {'name': 'Solomon Islands'}, {'name': 'Seychelles'}, {'name': 'Sudan'}, {'name': 'Sweden'}, {'name': 'Singapore'}, {'name': 'Saint Helena'}, {'name': 'Slovenia'}, {'name': 'Svalbard and Jan Mayen'}, {'name': 'Slovakia'}, {'name': 'Sierra Leone'}, {'name': 'San Marino'}, {'name': 'Senegal'}, {'name': 'Somalia'}, {'name': 'Suriname'}, {'name': 'South Sudan'}, {'name': 'São Tomé and Príncipe'}, {'name': 'El Salvador'}, {'name': 'Sint Maarten'}, {'name': 'Syria'}, {'name': 'Swaziland'}, {'name': 'Turks and Caicos Islands'}, {'name': 'Chad'}, {'name': 'French Southern Territories'}, {'name': 'Togo'}, {'name': 'Thailand'}, {'name': 'Tajikistan'}, {'name': 'Tokelau'}, {'name': 'East Timor'}, {'name': 'Turkmenistan'}, {'name': 'Tunisia'}, {'name': 'Tonga'}, {'name': 'Turkey'}, {'name': 'Trinidad and Tobago'}, {'name': 'Tuvalu'}, {'name': 'Taiwan'}, {'name': 'Tanzania'}, {'name': 'Ukraine'}, {'name': 'Uganda'}, {'name': 'U.S. Minor Outlying Islands'}, {'name': 'United States'}, {'name': 'Uruguay'}, {'name': 'Uzbekistan'}, {'name': 'Vatican City'}, {'name': 'Saint Vincent and the Grenadines'}, {'name': 'Venezuela'}, {'name': 'British Virgin Islands'}, {'name': 'U.S. Virgin Islands'}, {'name': 'Vietnam'}, {'name': 'Vanuatu'}, {'name': 'Wallis and Futuna'}, {'name': 'Samoa'}, {'name': 'Kosovo'}, {'name': 'Yemen'}, {'name': 'Mayotte'}, {'name': 'South Africa'}, {'name': 'Zambia'}, {'name': 'Zimbabwe'}], 'country': {'name': 'United States', 'native': 'United States', 'capital': 'Washington D.C.', 'emoji': '🇺🇸', 'currency': 'USD,USN,USS', 'languages': [{'code': 'en', 'name': 'English'}], 'states': [{'name': 'Alabama', 'code': 'AL'}, {'name': 'Alaska', 'code': 'AK'}, {'name': 'Arizona', 'code': 'AZ'}, {'name': 'Arkansas', 'code': 'AR'}, {'name': 'California', 'code': 'CA'}, {'name': 'Colorado', 'code': 'CO'}, {'name': 'Connecticut', 'code': 'CT'}, {'name': 'District of Columbia', 'code': 'DC'}, {'name': 'Delaware', 'code': 'DE'}, {'name': 'Florida', 'code': 'FL'}, {'name': 'Georgia', 'code': 'GA'}, {'name': 'Hawaii', 'code': 'HI'}, {'name': 'Idaho', 'code': 'ID'}, {'name': 'Illinois', 'code': 'IL'}, {'name': 'Indiana', 'code': 'IN'}, {'name': 'Iowa', 'code': 'IA'}, {'name': 'Kansas', 'code': 'KS'}, {'name': 'Kentucky', 'code': 'KY'}, {'name': 'Louisiana', 'code': 'LA'}, {'name': 'Maine', 'code': 'ME'}, {'name': 'Maryland', 'code': 'MD'}, {'name': 'Massachusetts', 'code': 'MA'}, {'name': 'Michigan', 'code': 'MI'}, {'name': 'Minnesota', 'code': 'MN'}, {'name': 'Mississippi', 'code': 'MS'}, {'name': 'Missouri', 'code': 'MO'}, {'name': 'Montana', 'code': 'MT'}, {'name': 'Nebraska', 'code': 'NE'}, {'name': 'Nevada', 'code': 'NV'}, {'name': 'New Hampshire', 'code': 'NH'}, {'name': 'New Jersey', 'code': 'NJ'}, {'name': 'New Mexico', 'code': 'NM'}, {'name': 'New York', 'code': 'NY'}, {'name': 'North Carolina', 'code': 'NC'}, {'name': 'North Dakota', 'code': 'ND'}, {'name': 'Ohio', 'code': 'OH'}, {'name': 'Oklahoma', 'code': 'OK'}, {'name': 'Oregon', 'code': 'OR'}, {'name': 'Pennsylvania', 'code': 'PA'}, {'name': 'Rhode Island', 'code': 'RI'}, {'name': 'South Carolina', 'code': 'SC'}, {'name': 'South Dakota', 'code': 'SD'}, {'name': 'Tennessee', 'code': 'TN'}, {'name': 'Texas', 'code': 'TX'}, {'name': 'Utah', 'code': 'UT'}, {'name': 'Vermont', 'code': 'VT'}, {'name': 'Virginia', 'code': 'VA'}, {'name': 'Washington', 'code': 'WA'}, {'name': 'West Virginia', 'code': 'WV'}, {'name': 'Wisconsin', 'code': 'WI'}, {'name': 'Wyoming', 'code': 'WY'}, {'name': 'American Samoa', 'code': 'AS'}, {'name': 'Guam', 'code': 'GU'}, {'name': 'Northern Mariana Islands', 'code': 'MP'}, {'name': 'Puerto Rico', 'code': 'PR'}, {'name': 'United States Minor Outlying Islands', 'code': 'UM'}, {'name': 'Virgin Islands', 'code': 'VI'}]}}}</msg>
<status status="PASS" starttime="20211213 12:21:14.740" endtime="20211213 12:21:14.745"/>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary">
<doc>Removes all the session objects</doc>
<msg timestamp="20211213 12:21:14.747" level="INFO">Deleting All Sessions</msg>
<status status="PASS" starttime="20211213 12:21:14.746" endtime="20211213 12:21:14.747"/>
</kw>
<msg timestamp="20211213 12:21:14.749" level="INFO">${resp} = {'data': {'countries': [{'name': 'Andorra'}, {'name': 'United Arab Emirates'}, {'name': 'Afghanistan'}, {'name': 'Antigua and Barbuda'}, {'name': 'Anguilla'}, {'name': 'Albania'}, {'name': 'Armenia'},...</msg>
<status status="PASS" starttime="20211213 12:21:14.633" endtime="20211213 12:21:14.749"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Validate the successful response</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211213 12:21:14.751" level="INFO">Validate the successful response</msg>
<status status="PASS" starttime="20211213 12:21:14.750" endtime="20211213 12:21:14.751"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${resp['data']}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211213 12:21:14.752" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20211213 12:21:14.751" endtime="20211213 12:21:14.753"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${resp['data']['country']['name']}</arg>
<arg>United States</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211213 12:21:14.753" endtime="20211213 12:21:14.754"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${resp['data']['country']['capital']}</arg>
<arg>Washington D.C.</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211213 12:21:14.755" endtime="20211213 12:21:14.756"/>
</kw>
<status status="PASS" starttime="20211213 12:21:14.632" endtime="20211213 12:21:14.756"/>
</kw>
<tag>Countries</tag>
<status status="PASS" starttime="20211213 12:21:14.630" endtime="20211213 12:21:14.757"/>
</test>
<test id="s1-s1-s1-t2" name="Validate The Countries List">
<kw name="TestCaseSetup" library="Common_API_Keywords" type="SETUP">
<doc>common initialization for UI and API test cases</doc>
<kw name="Get Time" library="BuiltIn">
<var>${TESTCASE_EPOCH_STARTTIME}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20211213 12:21:14.759" level="INFO">${TESTCASE_EPOCH_STARTTIME} = 1639416074</msg>
<status status="PASS" starttime="20211213 12:21:14.759" endtime="20211213 12:21:14.759"/>
</kw>
<status status="PASS" starttime="20211213 12:21:14.758" endtime="20211213 12:21:14.760"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Verifying the total number of countries resturned</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211213 12:21:14.761" level="INFO">Verifying the total number of countries resturned</msg>
<status status="PASS" starttime="20211213 12:21:14.760" endtime="20211213 12:21:14.761"/>
</kw>
<kw name="Verify The Countries List" library="CountriesKeywords">
<kw name="Log" library="BuiltIn">
<arg>Send the post request with the valid query</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211213 12:21:14.762" level="INFO">Send the post request with the valid query</msg>
<status status="PASS" starttime="20211213 12:21:14.761" endtime="20211213 12:21:14.762"/>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<var>${data}</var>
<arg>Countries.json</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211213 12:21:14.763" level="INFO" html="true">Getting file '&lt;a href="file://C:\Users\nghani\eclipse-workspace\countries\Countries.json"&gt;C:\Users\nghani\eclipse-workspace\countries\Countries.json&lt;/a&gt;'.</msg>
<msg timestamp="20211213 12:21:14.763" level="FAIL">FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\nghani\\eclipse-workspace\\countries\\Countries.json'</msg>
<status status="FAIL" starttime="20211213 12:21:14.762" endtime="20211213 12:21:14.763"/>
</kw>
<kw name="Post Response" library="Common_API_Keywords">
<var>${resp}</var>
<arg>${COUNTRIES_API_URL}</arg>
<doc>Returns the response of the post Request</doc>
<status status="NOT RUN" starttime="20211213 12:21:14.763" endtime="20211213 12:21:14.764"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${total_countries}</var>
<arg>${resp['data']['countries']['name']}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="NOT RUN" starttime="20211213 12:21:14.764" endtime="20211213 12:21:14.764"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${total_countries}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20211213 12:21:14.764" endtime="20211213 12:21:14.764"/>
</kw>
<status status="FAIL" starttime="20211213 12:21:14.761" endtime="20211213 12:21:14.765"/>
</kw>
<tag>Countries</tag>
<status status="FAIL" starttime="20211213 12:21:14.757" endtime="20211213 12:21:14.769">FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\nghani\\eclipse-workspace\\countries\\Countries.json'</status>
</test>
<test id="s1-s1-s1-t3" name="Validate The Single Country Info">
<kw name="TestCaseSetup" library="Common_API_Keywords" type="SETUP">
<doc>common initialization for UI and API test cases</doc>
<kw name="Get Time" library="BuiltIn">
<var>${TESTCASE_EPOCH_STARTTIME}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20211213 12:21:14.775" level="INFO">${TESTCASE_EPOCH_STARTTIME} = 1639416074</msg>
<status status="PASS" starttime="20211213 12:21:14.774" endtime="20211213 12:21:14.776"/>
</kw>
<status status="PASS" starttime="20211213 12:21:14.773" endtime="20211213 12:21:14.776"/>
</kw>
<kw name="Verify The Countries List" library="CountriesKeywords">
<kw name="Log" library="BuiltIn">
<arg>Send the post request with the valid query</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211213 12:21:14.779" level="INFO">Send the post request with the valid query</msg>
<msg timestamp="20211213 12:21:14.779" level="INFO">Traceback (most recent call last):
  File "C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py", line 782, in _send_to_server
    self.decoder_encoder.dump(packet)
  File "C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py", line 840, in dump
    self._write(self._json_encoder(obj))
  File "C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py", line 847, in _write
    self._file_to_write.flush()
  File "C:\Users\nghani\AppData\Local\Programs\Python\Python37\lib\socket.py", line 607, in write
    return self._sock.send(b)
ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<status status="PASS" starttime="20211213 12:21:14.778" endtime="20211213 12:21:14.780"/>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<var>${data}</var>
<arg>Countries.json</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211213 12:21:14.781" level="INFO" html="true">Getting file '&lt;a href="file://C:\Users\nghani\eclipse-workspace\countries\Countries.json"&gt;C:\Users\nghani\eclipse-workspace\countries\Countries.json&lt;/a&gt;'.</msg>
<msg timestamp="20211213 12:21:14.781" level="INFO">Traceback (most recent call last):
  File "C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py", line 782, in _send_to_server
    self.decoder_encoder.dump(packet)
  File "C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py", line 840, in dump
    self._write(self._json_encoder(obj))
  File "C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py", line 847, in _write
    self._file_to_write.flush()
  File "C:\Users\nghani\AppData\Local\Programs\Python\Python37\lib\socket.py", line 607, in write
    return self._sock.send(b)
ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.787" level="FAIL">FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\nghani\\eclipse-workspace\\countries\\Countries.json'</msg>
<status status="FAIL" starttime="20211213 12:21:14.780" endtime="20211213 12:21:14.788"/>
</kw>
<kw name="Post Response" library="Common_API_Keywords">
<var>${resp}</var>
<arg>${COUNTRIES_API_URL}</arg>
<doc>Returns the response of the post Request</doc>
<status status="NOT RUN" starttime="20211213 12:21:14.789" endtime="20211213 12:21:14.790"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${total_countries}</var>
<arg>${resp['data']['countries']['name']}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="NOT RUN" starttime="20211213 12:21:14.791" endtime="20211213 12:21:14.791"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${total_countries}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20211213 12:21:14.792" endtime="20211213 12:21:14.792"/>
</kw>
<status status="FAIL" starttime="20211213 12:21:14.777" endtime="20211213 12:21:14.793"/>
</kw>
<tag>Country</tag>
<status status="FAIL" starttime="20211213 12:21:14.771" endtime="20211213 12:21:14.794">FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\nghani\\eclipse-workspace\\countries\\Countries.json'</status>
</test>
<kw name="SuiteTeardown API" type="TEARDOWN">
<kw name="SuiteTeardown" library="Common_API_Keywords">
<doc>common teardown for UI and API test suites</doc>
<kw name="Log" library="BuiltIn">
<arg>Close DB connection</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211213 12:21:14.797" level="INFO">Close DB connection</msg>
<msg timestamp="20211213 12:21:14.798" level="INFO">Traceback (most recent call last):
  File "C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py", line 782, in _send_to_server
    self.decoder_encoder.dump(packet)
  File "C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py", line 840, in dump
    self._write(self._json_encoder(obj))
  File "C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py", line 847, in _write
    self._file_to_write.flush()
  File "C:\Users\nghani\AppData\Local\Programs\Python\Python37\lib\socket.py", line 607, in write
    return self._sock.send(b)
ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<status status="PASS" starttime="20211213 12:21:14.797" endtime="20211213 12:21:14.798"/>
</kw>
<status status="PASS" starttime="20211213 12:21:14.796" endtime="20211213 12:21:14.799"/>
</kw>
<status status="PASS" starttime="20211213 12:21:14.795" endtime="20211213 12:21:14.800"/>
</kw>
<doc>GraphQL public countries API</doc>
<status status="FAIL" starttime="20211213 12:21:14.191" endtime="20211213 12:21:14.801"/>
</suite>
<status status="FAIL" starttime="20211213 12:21:14.188" endtime="20211213 12:21:14.804"/>
</suite>
<status status="FAIL" starttime="20211213 12:21:14.169" endtime="20211213 12:21:14.805"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="2" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="1" skip="0">Countries</stat>
<stat pass="0" fail="1" skip="0">Country</stat>
</tag>
<suite>
<stat pass="1" fail="2" skip="0" id="s1" name="Countries">Countries</stat>
<stat pass="1" fail="2" skip="0" id="s1-s1" name="Tests">Countries.Tests</stat>
<stat pass="1" fail="2" skip="0" id="s1-s1-s1" name="Countries API">Countries.Tests.Countries API</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20211213 12:21:14.769" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.771" level="ERROR">Calling method 'end_test' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.773" level="ERROR">Calling method 'start_test' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.774" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.775" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.775" level="ERROR">Calling method 'log_message' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.776" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.777" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.778" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.778" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.779" level="ERROR">Calling method 'log_message' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.779" level="ERROR">Calling method 'log_message' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.780" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.781" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.781" level="ERROR">Calling method 'log_message' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.787" level="ERROR">Calling method 'log_message' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.788" level="ERROR">Calling method 'log_message' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.789" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.790" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.790" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.791" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.792" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.792" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.793" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.793" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.794" level="ERROR">Calling method 'end_test' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.795" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.796" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.797" level="ERROR">Calling method 'start_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.798" level="ERROR">Calling method 'log_message' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.798" level="ERROR">Calling method 'log_message' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.799" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.800" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.801" level="ERROR">Calling method 'end_keyword' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.803" level="ERROR">Calling method 'end_suite' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.805" level="ERROR">Calling method 'end_suite' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
<msg timestamp="20211213 12:21:14.807" level="ERROR">Calling method 'end_suite' of listener 'C:\Users\nghani\AppData\Local\Temp\RobotTempDir5767737749999396844\TestRunnerAgent.py' failed: ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine</msg>
</errors>
</robot>
